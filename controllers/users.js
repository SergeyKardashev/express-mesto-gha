const bcrypt = require('bcrypt');
// const jwt = require('jsonwebtoken');
const User = require('../models/user');
const generateToken = require('../utils/jwt');
const {
  STATUS_OK,
  STATUS_CREATED,
  // STATUS_BAD_REQUEST,
  // STATUS_UNAUTHORIZED,
  // STATUS_FORBIDDEN,
  // STATUS_NOT_FOUND,
  // STATUS_CONFLICT,
  // STATUS_INTERNAL_SERVER_ERROR,
  MONGO_DUPLICATE_ERROR,
  STATUS_NOT_FOUND,
} = require('../constants/http-status');
const NotFoundError = require('../errors/not-found-error');
const BadRequestError = require('../errors/bad-request-error');
const ConflictError = require('../errors/conflict-error');
const UnauthorizedError = require('../errors/unauthorized-error');

const {
  // JWT_SECRET = 'Secret',
  SALT_ROUNDS = 10,
} = process.env;

const opts = { runValidators: true, new: true };

async function createUser(req, res, next) {
  const {
    email, password, name, about, avatar,
  } = req.body;

  try {
    // —É–º–µ—Å—Ç–µ–Ω –ª–∏ —Ç—É—Ç orFail? —ç—Ç–æ –∂–µ –Ω–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    const hash = await bcrypt.hash(password, SALT_ROUNDS);
    // .orFail(new Error('oops'));
    // .orFail((err) => {
    //   if (err.code === MONGO_DUPLICATE_ERROR) {
    //     throw new ConflictError('–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
    //   }
    //   if (err.name === 'CastError' || err.name === 'ValidationError') {
    //     throw new BadRequestError('–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    //   }
    // });

    const user = await User.create({
      email,
      password: hash,
      name,
      about,
      avatar,
    });
    return res.status(STATUS_CREATED).send(user);
  } catch (err) {
    // console.log(err);
    console.log('‚ö™Ô∏è –í –∫–µ—Ç—á–µ –∏–º—è ', err.name, ' –∏ –°—Ç–∞—Ç—É—Å–ö–æ–¥ ', err.statusCode, '–∫–æ–¥ (–Ω–µ—Å—Ç–∞—Ç—É—Å) ', err.code, '—Ç–µ–∫—Å—Ç ', err.message);

    if (err.code === MONGO_DUPLICATE_ERROR) {
      return next(new ConflictError('–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è'));
    }
    if (err.name === 'CastError' || err.name === 'ValidationError') {
      return next(new BadRequestError('–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'));
    }
    return next(err);
  }
}

async function login(req, res, next) {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email })
      .select('+password')
      .orFail(new UnauthorizedError('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å'));

    const matched = await bcrypt.compare(password, user.password);
    if (!matched) throw new UnauthorizedError('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    const token = generateToken({ _id: user._id });

    return res
      .status(STATUS_OK)
      .cookie('jwt', token, { maxAge: 604800000, httpOnly: true, sameSite: true })
      .send({ email: user.email, _id: user._id, message: 'token in cookie' }) // –•–ó —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
      .end(); //  –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ (send), —Ç–æ –Ω–µ –Ω—É–∂–µ–Ω end
  } catch (err) {
    res.clearCookie('jwt'); // —á–∏—â—É –∫—É–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º (–æ–¥–Ω—É, –∞ –Ω–µ –≤—Å–µ), –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
    return next(err); // –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –æ—à–∏–±–∫–∏ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
  }
}

function getAllUsers(req, res, next) {
  return User.find()
    .then((data) => res.status(STATUS_OK).send(data))
    .catch((err) => next(err));
}
// –î–æ –≤—ã–Ω–æ—Å–∞ —É—Å–ª–æ–≤–∏—è –∏–∑ orFail
// function findUserById(userId) {
//   return User.findById(userId)
//     .orFail((err) => {
//       if (err.name === 'CastError') {
//         // –¢–µ–∫—Å—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π. –ü—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
//         throw new BadRequestError('üî¥–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id');
//       }
//       // –¢–µ–∫—Å—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π. –ü—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
//       throw new NotFoundError('üü•–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É _id –Ω–µ –Ω–∞–π–¥–µ–Ω');
//     });
// }

function getUserById(req, res, next) {
  return User.findById(req.params.userId)
    .orFail(new NotFoundError('_id –Ω–µ –Ω–∞–π–¥–µ–Ω'))
    .then((dataFromDB) => res.status(STATUS_OK)
      .send({ name: dataFromDB.name, about: dataFromDB.about, avatar: dataFromDB.avatar }))
    .catch((err) => {
      console.log('‚ö™Ô∏è –í –∫–µ—Ç—á–µ –∏–º—è ', err.name, ' –∏ –°—Ç–∞—Ç—É—Å–ö–æ–¥ ', err.statusCode, '—Ç–µ–∫—Å—Ç ', err.message);
      if (err.statusCode === 404) return next(new NotFoundError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É _id –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      if (err.name === 'CastError') return next(new BadRequestError('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id'));
      return next();
    });
}
/* –ù—É–∂–Ω–∞ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞? –≠—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π ID 652ba4b4451ba72e27d00000, –∞ –Ω–µ Cast Error
// if (err.name === 'ValidationError') {
//   // üç≠üç≠üç≠ —Å –Ω—É–ª—è–º–∏ –ª–æ–º–∞–Ω—ã–π ID 652ba4b4451ba72e27d00000
//   return next(new BadRequestError('üç≠üç≠üç≠ ValidationError id'));
// }
*/

// –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä ?
function getCurrentUserById(req, res, next) {
  return User.findById(req.user)
    .orFail(new NotFoundError('_id –Ω–µ –Ω–∞–π–¥–µ–Ω'))
    .then((dataFromDB) => res.status(STATUS_OK)
      .send({ name: dataFromDB.name, about: dataFromDB.about, avatar: dataFromDB.avatar }))
    .catch((err) => {
      console.log('‚ö™Ô∏è –í –∫–µ—Ç—á–µ –∏–º—è ', err.name, ' –∏ –°—Ç–∞—Ç—É—Å–ö–æ–¥ ', err.statusCode, '—Ç–µ–∫—Å—Ç ', err.message);
      if (err.statusCode === STATUS_NOT_FOUND) return next(new NotFoundError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É _id –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      if (err.name === 'CastError') return next(new BadRequestError('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º id'));
      return next();
    });
}

function updateUser(req, res, next) {
  return User.findByIdAndUpdate(req.user._id, req.body, opts)
    .orFail(new NotFoundError())
    .then((user) => res.status(STATUS_OK).send({ name: user.name, about: user.about }))
    .catch((err) => {
      if (err.name === 'CastError' || err.name === 'ValidationError') {
        return next(new BadRequestError('–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è'));
      }
      if (err.statusCode === STATUS_NOT_FOUND) {
        return next(new NotFoundError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º _id –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }
      return next(err);
    });
}

function updateAvatar(req, res, next) {
  const id = req.user._id;
  const updateObject = req.body;
  return User.findByIdAndUpdate(id, updateObject, opts)
    .orFail(new NotFoundError())
    .then((avatarData) => res.status(STATUS_OK).send({ avatar: avatarData.avatar }))
    .catch((err) => {
      if (err.name === 'CastError' || err.name === 'ValidationError') {
        return next(new BadRequestError('–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞'));
      }
      if (err.statusCode === STATUS_NOT_FOUND) {
        return next(new NotFoundError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º _id –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }
      return next(err);
    });
}

module.exports = {
  createUser,
  login,
  getUserById,
  getCurrentUserById,
  getAllUsers,
  updateUser,
  updateAvatar,
};
