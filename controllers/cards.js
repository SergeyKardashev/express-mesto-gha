const Card = require('../models/card');
const {
  notFound,
  badRequest,
  ok,
  created,
  InternalServerError,
} = require('../constants/errorCodes');

// tmp middleware –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç user –≤ –∑–∞–ø—Ä–æ—Å—ã. req.user._id

function getAllCards(req, res) {
  Card.find()
    .then((dataFromDB) => res.status(ok).send(dataFromDB))
    .catch(() => res.status(InternalServerError).send({ message: '–û—à–∏–±–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' }));
}

function createCard(req, res) {
  return Card.create({ name: req.body.name, link: req.body.link, owner: req.user._id })
    .then((dataFromDB) => res.status(created)
      .send({
        name: dataFromDB.name,
        link: dataFromDB.link,
        _id: dataFromDB._id,
      }))
    .catch((err) => {
      if (err.name === 'CastError' || err.name === 'ValidationError') {
        return res.status(badRequest).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏' });
      }
      return res.status(InternalServerError).send({ message: '–û—à–∏–±–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' });
    });
}

function likeCard(req, res) {
  return Card.findByIdAndUpdate(
    req.params.cardId,
    { $addToSet: { likes: req.user._id } },
    { new: true },
  )
    .orFail(new Error('Not found'))
    .then((dataFromDB) => res.status(ok).send({ name: dataFromDB.name, about: dataFromDB.about }))

    .catch((err) => {
      if (err.message === 'Not found') {
        return res.status(notFound).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π _id –∫–∞—Ä—Ç–æ—á–∫–∏' });
      }
      if (err.name === 'CastError' || err.name === 'ValidationError') {
        return res.status(badRequest).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏–∏ –ª–∞–π–∫–∞' });
      }
      return res.status(InternalServerError).send({ message: '–û—à–∏–±–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' });
    });
}

function dislikeCard(req, res) {
  return Card.findByIdAndUpdate(
    req.params.cardId,
    { $pull: { likes: req.user._id } },
    { new: true },
  )
    .orFail(new Error('Not found'))
    .then((dataFromDB) => res.status(ok).send({ name: dataFromDB.name, about: dataFromDB.about }))
    .catch((err) => {
      if (err.name === 'CastError' || err.name === 'ValidationError') {
        return res.status(badRequest).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏–∏ –ª–∞–π–∫–∞' });
      }
      if (err.message === 'Not found') {
        return res.status(notFound).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π _id –∫–∞—Ä—Ç–æ—á–∫–∏' });
      }
      return res.status(InternalServerError).send({ message: '–û—à–∏–±–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' });
    });
}

// üü°  —Ç—Ä–∞–π —ç–Ω–¥ –∫—ç—Ç—á –¥–æ–±–∞–≤–∏–ª
async function findCardById(cardId) {
  try {
    console.log('–í –ü–û–ò–°–ö–û–í–ò–ö –ü–†–ò–®–õ–ê CARD ID) ', cardId);

    const cardData = await Card.findById(cardId).orFail(new Error('Not found 1')); // üü° –ù–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ç—É—Ç –Ω—É–∂–Ω–æ orFail

    console.log('–ò–©–ï–ô–ö–ê –í–ï–†–ù–ï–¢ CARD DATA: ', cardData);

    return cardData;
  } catch (err) {
    // –Ω–µ –∑–Ω–∞—é –Ω—É–∂–µ–Ω –ª–∏ –µ—Ä—Ä –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ

    return new Error('Not found 2'); // üü° –ù–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ç—É—Ç –Ω—É–∂–µ–Ω catch –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —á—É—Ç—å –≤—ã—à–µ orFail
  }
}

function deleteCard(req, res) {
  // üü° –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –∞–π–¥–∏—à–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ, –º–æ–∂–µ—Ç –∑—Ä—è - —ç—Ç–æ—Ç —Ä–æ—É—Ç –∑–∞—â–∏—â–µ–Ω –º–∏–¥–ª–≤—ç—Ä–æ–π.
  // console.log('–í —É–¥–∞–ª—è—à–∫—É –ø–æ–¥–∞—é –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ req.params: ', req.params);
  console.log('–í –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞ –∫ —É–¥–∞–ª—è—à–∫–µ –µ—Å—Ç—å –∞–π–¥–∏—à–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: ', req.params.cardId);
  if (!req.user._id) return res.status(badRequest).send({ message: 'üü° –•–ó –ö–¢–û –£–î–ê–õ–Ø–ï–¢. –í –¢–û–ö–ï–ù–ï –ù–ï–¢ ID' });

  // –ø—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á –∞–π–¥–∏—à–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∞–π–¥–∏—à–∫–∏ –∏–∑ –∏–Ω—Ñ—ã –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–∞—Ä—Ç–æ—á–∫–∏

  return findCardById(req.params.cardId)
    .then((foundCardData) => {
      console.log('–ò–ó –ò–©–ï–ô–ö–ò –í –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–®–õ–ê –ö–ê–†–¢–û–ß–ö–ê –° –í–õ–ê–î–ï–õ–¨–¶–ï–ú', foundCardData.owner);

      // –ø—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á –∞–π–¥–∏—à–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∞–π–¥–∏—à–∫–∏ –∏–∑ –∏–Ω—Ñ—ã –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      // üü° –ö–û–î –û–®–ò–ë–ö–ò –ù–ï –¢–û–¢
      if (!foundCardData.owner.equals(req.user._id)) return res.status(500).send({ message: 'üü° –°–†–ê–í–ù–ò–õ –ù–ï–ï–ï–ï –£–°–ü–ï–®–ù–û' });

      console.log('–ü–û–°–õ–ï –í–°–ï–• –ü–†–û–í–ï–†–û–ö –ë–£–î–ï–¢ –ó–ê–ü–£–©–ï–ù –ö–û–î –£–î–ê–õ–ï–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò');

      return Card.findByIdAndDelete(req.params.cardId)
        .orFail(new Error('Not found'))
        .then((dataFromDB) => res.status(ok).send({ _id: dataFromDB._id }));
    })
    .catch((err) => {
      console.log('–°–†–ê–ë–û–¢–ê–õ catch –£–î–ê–õ–ï–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò');

      if (err.name === 'CastError' || err.name === 'ValidationError') res.status(badRequest).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
      if (err.message === 'Not found') res.status(notFound).send({ message: '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º _id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

      console.log('–ù–ï –°–†–ê–ë–û–¢–ê–õ–ò –ö–ê–°–¢ –≠–†–†–û–†, –í–ê–õ–ò–î–ï–ô–®–ù, –ù–û–¢–§–ê–£–ù–¢. –ö–ò–î–ê–Æ –î–ï–§–û–õ–¢');
      return res.status(InternalServerError).send({ message: '–û—à–∏–±–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' });
    });
}

module.exports = {
  createCard,
  getAllCards,
  likeCard,
  dislikeCard,
  deleteCard,
};
