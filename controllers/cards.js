const Card = require('../models/card');

const {
  STATUS_OK,
  STATUS_CREATED,
  STATUS_BAD_REQUEST,
  // STATUS_UNAUTHORIZED,
  // STATUS_FORBIDDEN,
  STATUS_NOT_FOUND,
  // STATUS_INTERNAL_SERVER_ERROR,
  STATUS_FORBIDDEN,
  // STATUS_CONFLICT,
  // STATUS_INTERNAL_SERVER_ERROR,
} = require('../constants/http-status');
const NotFoundError = require('../errors/not-found-error');

function getAllCards(req, res, next) {
  return Card.find()
    .then((dataFromDB) => res.status(STATUS_OK).send(dataFromDB))
    .catch(next);
}

function createCard(req, res, next) {
  return Card.create({ name: req.body.name, link: req.body.link, owner: req.user._id })
    .then((dataFromDB) => res.status(STATUS_CREATED)
      .send({
        name: dataFromDB.name,
        link: dataFromDB.link,
        _id: dataFromDB._id,
      }))
    .catch((err) => {
      if (err.name === 'CastError' || err.name === 'ValidationError') return res.status(STATUS_BAD_REQUEST).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏' });
      return next(err);
    });
}

function likeCard(req, res, next) {
  return Card.findByIdAndUpdate(
    req.params.cardId,
    { $addToSet: { likes: req.user._id } },
    { new: true },
  )
    .orFail(new Error('Not found'))
    .then((dataFromDB) => res.status(STATUS_OK).send(dataFromDB))
    // .send({ name: dataFromDB.name, about: dataFromDB.name }))
    // —É —Ñ–æ—Ç–∫–∏ –ø–æ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è name. + –µ—Å—Ç—å –ª–∞–π–∫–∏, —Å—Å—ã–ª–∫–∞, –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–∞—Ç–∞
    .catch((err) => {
      if (err.message === 'Not found') return res.status(STATUS_NOT_FOUND).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π _id –∫–∞—Ä—Ç–æ—á–∫–∏' });
      if (err.name === 'CastError' || err.name === 'ValidationError') return res.status(STATUS_BAD_REQUEST).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏–∏ –ª–∞–π–∫–∞' });
      return next(err);
    });
}

function dislikeCard(req, res, next) {
  return Card.findByIdAndUpdate(
    req.params.cardId,
    { $pull: { likes: req.user._id } },
    { new: true },
  )
    .orFail(new Error('Not found'))
    .then((dataFromDB) => res.status(STATUS_OK).send(dataFromDB))
    // .send({ name: dataFromDB.name, about: dataFromDB.about }))
    // —É —Ñ–æ—Ç–∫–∏ –ø–æ–ª—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è name.
    // –∏ –µ—â–µ –µ—Å—Ç—å –ª–∞–π–∫–∏, —Å—Å—ã–ª–∫–∞, –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–∞—Ç–∞
    .catch((err) => {
      if (err.name === 'CastError' || err.name === 'ValidationError') return res.status(STATUS_BAD_REQUEST).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/—Å–Ω—è—Ç–∏–∏ –ª–∞–π–∫–∞' });
      if (err.message === 'Not found') return res.status(STATUS_NOT_FOUND).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π _id –∫–∞—Ä—Ç–æ—á–∫–∏' });
      return next(err);
    });
}

async function findCardById(cardId) {
  try { // console.log('–í –ü–û–ò–°–ö–û–í–ò–ö –ü–†–ò–®–õ–ê CARD ID) ', cardId);
    const cardData = await Card.findById(cardId)
      .orFail(new NotFoundError('–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º¬†_id¬†–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')); // üü° –ù–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ç—É—Ç –Ω—É–∂–Ω–æ orFail
    // console.log('–ò–©–ï–ô–ö–ê –í–ï–†–ù–ï–¢ CARD DATA: ', cardData);
    return cardData;
  } catch (err) { // –Ω–µ –∑–Ω–∞—é –Ω—É–∂–µ–Ω –ª–∏ –µ—Ä—Ä –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ
    return new NotFoundError('–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º¬†_id¬†–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); // üü° –ù–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ç—É—Ç –Ω—É–∂–µ–Ω catch –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —á—É—Ç—å –≤—ã—à–µ orFail
  }
}

// console.log('–í —É–¥–∞–ª—è—à–∫—É –ø–æ–¥–∞—é –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ req.params: ', req.params);
// console.log('–í –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞ –∫ —É–¥–∞–ª—è—à–∫–µ –µ—Å—Ç—å –∞–π–¥–∏—à–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: ', req.params.cardId);
function deleteCard(req, res, next) {
  // –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ user._id –≤ –∑–∞–ø—Ä–æ—Å–µ –∑—Ä—è - —Ä–æ—É—Ç –∑–∞—â–∏—â–µ–Ω –º–∏–¥–ª–≤—ç—Ä–æ–π.
  // if (!req.user._id) return res.status(STATUS_BAD_REQUEST)
  //  .send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }); // —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  // –ø—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á –∞–π–¥–∏—à–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∞–π–¥–∏—à–∫–∏ –∏–∑ –∏–Ω—Ñ—ã –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–∞—Ä—Ç–æ—á–∫–∏
  return findCardById(req.params.cardId)
    .then((foundCardData) => {
      // console.log('–ò–ó –ò–©–ï–ô–ö–ò –í –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–®–õ–ê –ö–ê–†–¢–û–ß–ö–ê –° –í–õ–ê–î–ï–õ–¨–¶–ï–ú', foundCardData.owner);
      // –ø—Ä–æ–≤–µ—Ä—è—é –º–∞—Ç—á –∞–π–¥–∏—à–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∞–π–¥–∏—à–∫–∏ –∏–∑ –∏–Ω—Ñ—ã –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–∞—Ä—Ç–æ—á–∫–∏
      if (!foundCardData.owner.equals(req.user._id)) return res.status(STATUS_FORBIDDEN).send({ message: '–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —á—É–∂—É—é –∫–∞—Ä—Ç–æ—á–∫—É' });
      // console.log('–ü–û–°–õ–ï –í–°–ï–• –ü–†–û–í–ï–†–û–ö –ë–£–î–ï–¢ –ó–ê–ü–£–©–ï–ù –ö–û–î –£–î–ê–õ–ï–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò');
      return Card.findByIdAndDelete(req.params.cardId)
        .orFail(new NotFoundError('–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º¬†_id¬†–Ω–µ –Ω–∞–π–¥–µ–Ω–∞')) // –Ω–∞–≤–µ—Ä–Ω–æ–µ –ª–∏—à–Ω–∏–π –æ—Ä—Ñ–µ–π–ª - –µ—Å—Ç—å —É –∫–æ–ª–±—ç–∫–∞
        .then((dataFromDB) => res.status(STATUS_OK).send({ _id: dataFromDB._id }));
    })
    .catch((err) => {
      // console.log('–°–†–ê–ë–û–¢–ê–õ catch –£–î–ê–õ–ï–ù–ò–Ø –ö–ê–†–¢–û–ß–ö–ò');
      if (err.name === 'CastError' || err.name === 'ValidationError') res.status(STATUS_BAD_REQUEST).send({ message: '–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
      if (err.message === 'Not found') res.status(STATUS_NOT_FOUND).send({ message: '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º _id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      // console.log('–ù–ï –°–†–ê–ë–û–¢–ê–õ–ò –ö–ê–°–¢ –≠–†–†–û–†, –í–ê–õ–ò–î–ï–ô–®–ù, –ù–û–¢–§–ê–£–ù–¢. –ö–ò–î–ê–Æ –î–ï–§–û–õ–¢');
      return next(err);
    });
}

module.exports = {
  createCard,
  getAllCards,
  likeCard,
  dislikeCard,
  deleteCard,
};
