const jwt = require('jsonwebtoken');
// const {
//   STATUS_UNAUTHORIZED,
//   STATUS_INTERNAL_SERVER_ERROR,
// } = require('../constants/http-status');
const UnauthorizedError = require('../errors/unauthorized-error');

const { JWT_SECRET = 'Secret' } = process.env;

function auth(req, res, next) {
  try {
    const token = req.cookies.jwt;
    if (!token) throw new UnauthorizedError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');

    const payload = jwt.verify(token, JWT_SECRET);
    // console.log('‚úÖ –ü–ï–ô–õ–û–£–î –¢–û–ö–ï–ù–ê –û–¢–ü–†–ê–í–õ–Æ –í –ó–ê–ü–†–û–°–ï —á–µ—Ä–µ–∑ req.user = payload : ', payload);
    req.user = payload;
    return next();
  } catch (error) {
    return next(error);
  }
}

// –±—ã–ª–æ —É—Ç—Ä–æ–º –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
// function authOnMondayMorning(req, res, next) {
// function auth(req, res, next) {
//   let payload;

//   try {
//     const token = req.cookies.jwt;
//     // console.log('üü° –¢–û–ö–ï–ù –≤ auth –ò–ó –ó–ê–ü–†–û–°–ê —á–µ—Ä–µ–∑ req.cookies.jwt: ', token);
//     if (!token) throw new UnauthorizedError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');

//     payload = jwt.verify(token, JWT_SECRET);
//     // console.log('‚úÖ –ü–ï–ô–õ–û–ê–î –¢–û–ö–ï–ù–ê –û–¢–ü–†–ê–í–õ–Æ –í –ó–ê–ü–†–û–°–ï —á–µ—Ä–µ–∑ req.user = payload : ', payload);
//   } catch (error) {
//     next(error);
//   }

//   req.user = payload;
//   return next();
// }

// } catch (error) {
//   if (error.message === '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') return res
//       .status(STATUS_UNAUTHORIZED).send({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
//   if (error.name === 'JsonWebTokenError') res
//      .status(STATUS_UNAUTHORIZED).send({ message: '–¢–æ–∫–µ–Ω OOPS' });
// return res.status(STATUS_INTERNAL_SERVER_ERROR).send({ message: '–î–µ—Ñ–æ–ª—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' });
// }

// const UnauthorizedError = require('../errors/unauthorized-error');

// function auth(req, res, next) {
//   let payload;
//   try {
//     console.log('–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ ', req.headers);
//     if (!req.headers.cookie) throw new UnauthorizedError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üü° 1');

//     // üî¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫. –•–æ—Ç—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫ —Å–æ–≤–µ—Ç—É—é—Ç
//     // üü° –Ω–µ —è—Å–Ω–æ –∫–∞–∫ –±—ã—Ç—å –µ—Å–ª–∏ –≤ –∫—É–∫–µ –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ jwt –∏–ª–∏ –Ω–µ —Ç–æ–ª—å–∫–æ jwt
//     console.log('–∫—É–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ req.headers.cookie.jwt', req.headers.cookie.jwt);

//     const token = req.headers.cookie.replace('jwt=', '');

//     payload = jwt.verify(token, JWT_SECRET);
//   } catch {
//     return next(UnauthorizedError('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üü° üü° 2'));
//     // üü°üü° –Ω–µ –Ω—É–∂–Ω–æ –ª–∏ new –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–æ–º –æ—à–∏–±–∫–∏?
//   }
//   req.user = payload;
//   return next(); // üü° –Ω–µ —É–≤–µ—Ä–µ–Ω —á—Ç–æ return —Ç—É—Ç –Ω—É–∂–µ–Ω.
// }

module.exports = auth;
